package pl.spiascik.ug.app.service;

import pl.spiascik.ug.app.domain.Cloth;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class ClothServiceJDBC implements ClothService {
    private Connection connection;

    private String url = "jdbc:hsqldb:hsql://localhost/workdb";

    private String createTableCloth = "CREATE TABLE Cloth(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(50) UNIQUE, type varchar(50), producer varchar(100))";

    private String ADD_SINGLE_CLOTH = "INSERT INTO Cloth (name, type, producer) VALUES ('BN01', 'hoodie', 'NIKE')";
    private String DELETE_ALL_CLOTHES = "DELETE FROM Cloth";

    private Statement statement;
    private PreparedStatement preparedStatement;


    public ClothServiceJDBC() {
        try {
            connection = DriverManager.getConnection(url);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Cloth".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(createTableCloth);

            preparedStatement = connection.prepareStatement("INSERT INTO Cloth (name, type, producer) VALUES (?,?,?)");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    Connection getConnection() {
        return connection;
    }

    @Override
    public void addCloth(Cloth cloth) throws SQLException {

//        boolean result = false;
        try {
            preparedStatement.setString(1, cloth.getName());
            preparedStatement.setString(2, cloth.getType());
            preparedStatement.setString(3, cloth.getProducer());
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    @Override
    public List<Cloth> getListOfClothes() throws SQLException {
        List<Cloth> clothes = new ArrayList<Cloth>();
        Cloth cloth;

        statement = connection.createStatement();
        try {
            ResultSet rs = statement.executeQuery("SELECT id, name, type, producer FROM Cloth");

            while (rs.next()) {
                cloth = new Cloth(rs.getString("name"), rs.getString("type"), rs.getString("producer"));
                clothes.add(cloth);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return clothes;
    }

    @Override
    public void showAllClothes() throws SQLException {
        List<Cloth> clothes = getListOfClothes();

        for (Cloth cloth : clothes) {
            System.out.println(cloth.toString());
        }
    }

    @Override
    public void showAllHoodies() throws SQLException {
        List<Cloth> clothes = getListOfClothes();

        for (Cloth cloth : clothes) {
            if(cloth.getType().equals("hoodie"))
                System.out.println(cloth.toString());
        }
    }

    @Override
    public boolean addAllClothes(List<Cloth> clothes) {
        try {
            connection.setAutoCommit(false);
            for (Cloth cloth : clothes) {
                preparedStatement.setString(1, cloth.getName());
                preparedStatement.setString(2, cloth.getType());
                preparedStatement.setString(3, cloth.getProducer());
                preparedStatement.executeUpdate();
            }
            connection.commit();
            return true;

        } catch (SQLException e) {
            System.out.println("Wycofanie transakcji");
            try {
                connection.rollback();
            } catch (SQLException e1) {
                System.out.println("Błąd wycofania");
                e1.printStackTrace();
            }
        }
        return false;
    }

    @Override
    public void searchCompany(String producerName) throws SQLException {
        List<Cloth> clothes = getListOfClothes();
        boolean found = false;
        for (Cloth cloth : clothes) {
            if (cloth.getProducer().equals(producerName)) {
                System.out.print("Znalazłem: ");
                System.out.print(cloth.toString());
                System.out.println("");

                found=true;
            }
        }
        if(!found)
            System.out.println("Nie znalazłem rekordów, producent:" + producerName);

    }
}
